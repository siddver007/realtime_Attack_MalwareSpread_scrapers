import websocket
import json
from datetime import datetime
 
def getUTCTimestamp():
    return datetime.utcnow()
 
def doDump():
    prevDate = getUTCTimestamp().date()
    f = open('fortinet_dump_' + str(prevDate) + '.csv', 'a')
    ws = websocket.create_connection("wss://threatmap.fortiguard.com/ws", subprotocols=["wamp.2.json"])

    msg1 = ('[1,"threatmap",{"roles":{"caller":{"features":{"caller_identification":true,"progressive_call_results"' +
    ':true}},"callee":{"features":{"caller_identification":true,"pattern_based_registration":true,"shared_registration"' +
    ':true,"progressive_call_results":true,"registration_revocation":true}},"publisher":{"features":{"publisher_identification"' +
    ':true,"subscriber_blackwhite_listing":true,"publisher_exclusion":true}},"subscriber":{"features":{"' +
    'publisher_identification":true,"pattern_based_subscription":true,"subscription_revocation":true}}}}]')

    msg2 = '[32,6361223091442090,{},"ips"]'

    ws.send(msg1)
    ws.send(msg2)
     
    count = 0
    try:
        while ws.connected:
            try:
                if count == 2:
                    dump = json.loads(ws.recv())[4][0]
                    timestamp = getUTCTimestamp()
                    # source lat , source long , source country-code , destination lat , destination long , destination country-code ,
                    # type , severity , timestamp (UTC)
                    data_string = (str(dump['src']['latitude']) + " , " + str(dump['src']['longitude']) + " , " + str(dump['src']['countrycode']) +
                        " , " + str(dump['dst']['latitude']) + " , " + str(dump['dst']['longitude']) + " , " + str(dump['dst']['countrycode']) + " , " + 
                        str(dump['type']) + " , " + str(dump['severity']) + " , " + str(getUTCTimestamp()))
                    if timestamp.date() > prevDate:
                        f.close()
                        f = open('fortinet_dump_' + str(timestamp.date()) + '.csv', 'a')
                        prevDate = timestamp.date()
                    f.write(data_string + "\n")
                    print(data_string)
                else:
                    ws.recv()

                if count < 2:
                    count += 1
            except Exception as e:                
                pass
    finally:        
        print('Closing file...')
        f.close() 
                 
if __name__ == "__main__":
    while True:
        try:
            doDump()
        except:
            pass