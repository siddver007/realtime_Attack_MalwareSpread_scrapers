import websocket
import json
from datetime import datetime

def getUTCTimestamp():
    return datetime.utcnow()

def doDump():
    prevDate = getUTCTimestamp().date()
    f = open('checkpoint_dump_' + str(prevDate) + '.csv', 'a', 1)
    ws = websocket.create_connection('wss://threatmap.checkpoint.com/ThreatPortal/websocket' +
                                   '?X-Atmosphere-tracking-id=0' +
                                   '&X-Atmosphere-Framework=2.2.5-javascript' +
                                   '&X-Atmosphere-Transport=websocket' +
                                   '&X-Atmosphere-TrackMessageSize=true' +
                                   '&Content-Type=application/json' +
                                   '&X-atmo-protocol=true')

    count = 1
    flag = 0
    try:
        while ws.connected:
            try:
                result =  ws.recv()

                if count > 1:
                    result = result.split('|')[1]
                    dump = json.loads(result)
                    timestamp = getUTCTimestamp()
                    # attack , source_lat , source_long , destination_lat , destination_long , timestamp (UTC)
                    data_string = (str(dump['attackname']) + ' , ' + str(dump['sourcelatitude']) + ' , ' +
                                  str(dump['sourcelongitude']) + ' , ' + str(dump['destinationlatitude']) +
                                  ' , ' + str(dump['destinationlongitude']) + ' , ' + str(timestamp))

                    if timestamp.date() > prevDate:
                        f.close()
                        f = open('checkpoint_dump_' + str(timestamp.date()) + '.csv', 'a', 1)
                        prevDate = timestamp.date()

                    f.write(data_string + "\n")
                    print(data_string)
                    flag = 2              

                count = 2

            except Exception as e:
                flag = 1
                pass
    finally:
        print('Closing file...')
        f.close()                

if __name__ == "__main__":
    while True:
        try:
            doDump()
        except:
            pass
